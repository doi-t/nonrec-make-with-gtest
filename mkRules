#!/bin/bash
#bin, lib, testの各サブディレクトリのルール記述したMakefileを生成するスクリプト
#Usage : mkRules [bin|lib|test] [target_directory]
#
#新たにlib/fooディレクトリを生成し,実行ファイル用のRules.mkを生成する場合
#./mkRules bin bin/foo
#新たにlib/barディレクトリを生成し,ライブラリ用のRules.mkを生成する場合
#./mkRules lib lib/bar
#新たにlib/hogeディレクトリを生成し,テスト用のRules.mkを生成する場合
#./mkRules test test/hoge

template_header(){
local path="$1/$2"
local name="$2"
cat > "$path.h" <<- EOF
	#ifndef ___$name	
	#define ___$name



	#endif //___$name
EOF
}

template_src(){
local path="$1/$2"
local name="$2"
cat > "$path.cc" <<- EOF
	#include "$name/$name.h"
EOF
}

template_gtest(){
local path="$1/$2"
local name="$2"
cat > "${path}_unittest.cc" <<- EOF
	#include "gtest/gtest.h"
	#include "$name/$name.h"
EOF
}

output="Rules.mk"

binRules(){
local dir=$1
local name=$2
cat > "$dir/$output" <<- EOF
	exec-binary-name := $name
	dependent-libraries := 
	local_src := \$(wildcard \$(subdirectory)/*.cc)

	\$(eval \$(call make-exec-binary, \$(subdirectory)/\$(exec-binary-name), \$(local_src), \$(dependent-libraries)))
EOF

template_header $dir $name
template_src $dir $name
}

libRules(){
local dir=$1
local name=$2
cat > "$dir/$output" <<- EOF 
	library-name := lib$name.a
	local_src := \$(wildcard \$(subdirectory)/*.cc)

	\$(eval \$(call make-library, \$(subdirectory)/\$(library-name), \$(local_src)))
EOF

template_header $dir $name
template_src $dir $name
}

testRules(){
local dir=$1
local name=$2
cat > "$dir/$output" <<- EOF 
	local_test_suites := test_$name
	target_libraries := lib/$name/lib$name.a
	local_src := \$(wildcard \$(subdirectory)/*.cc)

	\$(eval \$(call make-test, \$(subdirectory)/\$(local_test_suites), \$(local_src), \$(target_libraries)))
EOF

template_gtest $dir $name
}

usage_exit(){
	echo "Usage : $0 -blt name"
	echo "-b(bin), -l(lib), -t(test)"
	echo "example:"
	echo "$0 -b foo"
	echo "$0 -l bar"
	echo "$0 -t hoge"
	exit 1
}

flag="false"
while getopts b:l:t:h opt
do
flag="true"
name="$OPTARG"
	case $opt in
	b)	mode="bin"
		dir="bin/$OPTARG" ;;
	l)	mode="lib"
		dir="lib/$OPTARG" ;;
	t)	mode="test"
		dir="test/$OPTARG" ;;
	\?)
		usage_exit ;;
	esac
done
shift $((OPTIND - 1))

[ $flag = "false" ] && usage_exit

if [ ! -e $dir ]; then
	mkdir -p $dir
else
	echo "$dir is already exist."	
	exit 1
fi

case $mode in
	bin) binRules $dir $name
		;;
	lib) libRules $dir $name
		;;
	test) testRules $dir $name
		;;
	*) usage_exit
		;;
esac
